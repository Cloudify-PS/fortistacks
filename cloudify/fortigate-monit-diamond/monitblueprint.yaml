tosca_definitions_version: cloudify_dsl_1_3

description: >
  Test diamond extension for monitoring
  

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.5.2/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.8/plugin.yaml
  - types/fortigate-types.yaml
#  - types/openstack-fortigate-types.yaml

inputs:
  fos_image:
    default: {}
  fos_flavor:
    default: {}
  key_name:
    default: {}
  ub_image:
     default: {}  
  ub_flavor:
     default: {}
  mgmt_network_name:
    default: "mgmt"
  external_network_name:
    default: "ext_net"



dsl_definitions:

  openstack_config: &openstack_config
#    username: { get_input: keystone_username }
#   password: { get_input: keystone_password }
#  tenant_name: { get_input: keystone_tenant_name }
# auth_url: { get_input: keystone_url }
#plugins:
#    diamond:
#        executor: central_deployment_agent
        #source:  http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.6/cloudify_diamond_plugin-1.3.6-py26-none-linux_x86_64-centos-Final.wgn
#        source:  http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.8/cloudify_diamond_plugin-1.3.8-py27-none-linux_x86_64-centos-Core.wgn
#        package_name: cloudify-diamond-plugin
#        package_version: '1.3.6'
#        install: true


node_templates:

## Try first the diamond on central agent.
  proxy_server:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: ub_flavor }
        key_name: { get_input: key_name }
      agent_config:
        user: ubuntu
        key: /home/cfyuser/cfy_rsa
        # be sure to copy your key first it must match default key in openstack
        # scp /home/thomas/.ssh/id_rsa centos@77.81.7.7:~/
        # ssh centos@77.81.7.7 sudo chown cfyuser id_rsa
      openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: |
                #cloud-config
                chpasswd:
                  list: |
                    ubuntu:fortinet
                  expire: False
                package_upgrade: true
                packages:
                  - python
                  - python-pip

  proxy_node:
    type: FortigateCollector
    relationships:
      - type: cloudify.relationships.contained_in
        target: proxy_server
      - type: cloudify.relationships.monitors
        target: fortigate_monitored



  fos_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }


  left_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: left_network_openstack

  left_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: left_subnet_openstack
      subnet:
        host_routes: [ {"nexthop": "10.40.40.254", "destination": "10.20.20.0/24"} ]
        allocation_pools:
          - start: 10.40.40.3
            end: 10.40.40.140
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.40.40.0/24
              ip_version: 4
              gateway_ip: null
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.40.40.0/24
              ip_version: 4
              gateway_ip: null
    relationships:
      - target: left_network
        type: cloudify.relationships.contained_in

  right_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: right_network_openstack

  right_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: right_subnet_openstack
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.20.20.0/24
              ip_version: 4
              gateway_ip: null
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.20.20.0/24
              ip_version: 4
              gateway_ip: null
    relationships:
      - target: right_network
        type: cloudify.relationships.contained_in

  left_port:
    type: cloudify.openstack.nodes.Port
    properties:
      resource_id: left_port
      fixed_ip: "10.40.40.254"
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              port_security_enabled: False
    relationships:
      - target: left_network
        type: cloudify.relationships.contained_in
      - target: left_subnet
        type: cloudify.relationships.depends_on

  cfy_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: cfy_security_group_openstack
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
          port_range_max: null
          port_range_min: null



  fortigate_monitored:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: fos_image }
        flavor_name: { get_input: fos_flavor }
        #useless key_name for fortinet but mandatory for openstack
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # do not install agent
      openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              #try with concat to put the fortimanageip has a config
              userdata: |
                #FOS VM Config File
                config system interface
                edit mgmt
                 set mode dhcp
                 set allowaccess ping https ssh http snmp fgfm
                 set defaultgw enable
                next
                edit port1
                set mode dhcp
                set allowaccess ping
                 set defaultgw disable
                next
                edit port2
                set mode dhcp
                set allowaccess ping
                set defaultgw disable
                next
                end
                config firewall policy
                edit 1
                set name "Allow any any"
                set srcintf "any"
                set dstintf "any"
                set srcaddr "all"
                set dstaddr "all"
                set action accept
                set schedule "always"
                set service "ALL"
                set nat enable
                next
                end
    relationships:
      - target: fos_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: left_port
        type: cloudify.relationships.connected_to
      - target: right_network
        type: cloudify.relationships.connected_to

#      - target: right_subnet
#        type: cloudify.relationships.depends_on
#      - target: my_security_group
#        type: cloudify.openstack.server_connected_to_security_group
#not compatible with portsecurity disabled

### Now the Diamond proxy and connection:

