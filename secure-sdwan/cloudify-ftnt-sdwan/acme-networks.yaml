tosca_definitions_version: cloudify_dsl_1_3

description: >
  Testing blueprint
  $ cfy secret create fgt_license -f ../../fortigate/FGT.lic

imports:
  - includes/wan.yaml


inputs:
  fos_image:
    default: {}
  fos_flavor:
    default: {}
  key_name:
    default: {}
  ub_image:
     default: {}
  ub_flavor:
     default: {}
  agent_user:
      default: "ubuntu"


  mgmt_network_name:
    default: "mgmt"
  external_network_name:
    default: "ext_net"



dsl_definitions:

# The configuration of openstack access is in the file /etc/cloudify/openstack_config.json
# For simplicity of blueprint reading.

#  ##openstack_config: &openstack_config
#    username: { get_secret: keystone_username }
#    password: { get_secret: keystone_password }
#    tenant_name: { get_secret: keystone_tenant_name }
#    auth_url: { get_secret: keystone_url }
#    region: { get_secret: region }

node_templates:


# networks

  mpls_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: mpls_network_openstack

  mpls_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      ##openstack_config: *openstack_config
      resource_id: mpls_subnet_openstack
      subnet:
        host_routes: [ {"nexthop": "10.20.20.254", "destination": "0.0.0.0/0"} ]
        cidr: 10.20.20.0/24
        allocation_pools:
        - start: 10.20.20.3
          end: 10.20.20.140
        ip_version: 4
        gateway_ip: null
    relationships:
    - target: mpls_network
      type: cloudify.relationships.contained_in

  branchea_lan:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: branchea_lan

  branchea_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      ##openstack_config: *openstack_config
      resource_id: branchea_subnet_openstack
      subnet:
        host_routes: [ {"nexthop": "10.1.2.254", "destination": "0.0.0.0/0"} ]
        cidr: 10.1.2.0/24
        allocation_pools:
        - start: 10.1.2.3
          end: 10.1.2.140
        ip_version: 4
        gateway_ip: null
    relationships:
    - target: branchea_lan
      type: cloudify.relationships.contained_in


  fosa_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }

  branchea_fortigate:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: fos_image }
        flavor_name: { get_input: fos_flavor }
        #useless key_name for fortinet but mandatory for openstack
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # do not install agent
      ##openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              config_drive: true
              userdata: |
                #FOS VM Config File
                config system interface
                edit port1
                 set mode dhcp
                 set allowaccess ping https ssh http snmp fgfm
                 set defaultgw enable
                next
                edit port2
                set mode dhcp
                set allowaccess ping
                 set defaultgw disable
                next
                edit port3
                set mode dhcp
                set allowaccess ping
                 set defaultgw disable
                next
                edit port4
                  set mode dhcp
                  set allowaccess ping
                   set defaultgw disable
                  next
                end
                config firewall policy
                edit 1
                  set name "Allow any any"
                  set srcintf "any"
                  set dstintf "any"
                  set srcaddr "all"
                  set dstaddr "all"
                  set action accept
                  set schedule "always"
                  set service "ALL"
                  set nat enable
                next
                end
              files:
               license: { get_secret: fgt_license }
    relationships:
      - target: fosa_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: branchea_lan
        type: cloudify.relationships.connected_to
      - target: branchea_subnet
        type: cloudify.relationships.depends_on
        #
      - target: mpls_network
        type: cloudify.relationships.connected_to
      - target: mpls_subnet
        type: cloudify.relationships.depends_on
      - target: isp_network
        type: cloudify.relationships.connected_to
      - target: isp_subnet
        type: cloudify.relationships.depends_on
#      - target: right_subnet
#        type: cloudify.relationships.depends_on
#      - target: my_security_group
#        type: cloudify.openstack.server_connected_to_security_group
#not compatible with portsecurity disabled

  branche_ub_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }

  north_ubuntu:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: ub_flavor }
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # Bug in cloudify agents use internal ip and not floating
      ##openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: |
                #cloud-config
                chpasswd:
                  list: |
                    ubuntu:fortinet
                  expire: False
                write_files:
                  - content: |
                      # Enable dhcp on ens4
                      auto ens4
                      iface ens4 inet dhcp
                    path: /etc/network/interfaces.d/51-ens4.cfg
                package_upgrade: true
                packages:
                  - tcpdump
                  - zile
                power_state:
                 delay: "now"
                 mode: reboot
                 message: Rebooting to ensure network conf
                 timeout: 10
                 condition: True
    relationships:
      - target: ub_port
        type: cloudify.relationships.depends_on
      - target: ub_port
        type: cloudify.relationships.connected_to

  south_ubuntu:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: ub_flavor }
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # Bug in cloudify agents use internal ip and not floating
      ##openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: |
                #cloud-config
                chpasswd:
                  list: |
                    ubuntu:fortinet
                  expire: False
                write_files:
                  - content: |
                      # Enable dhcp on ens4
                      auto ens4
                      iface ens4 inet dhcp
                    path: /etc/network/interfaces.d/51-ens4.cfg
                package_upgrade: true
                packages:
                  - traceroute
                  - zile
                power_state:
                 delay: "now"
                 mode: reboot
                 message: Rebooting to ensure network conf
                 timeout: 10
                 condition: True
    relationships:
      - target: isp_network
        type: cloudify.relationships.connected_to
      - target: isp_subnet
        type: cloudify.relationships.depends_on
      - target: branche_ub_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip


# creating output for easing the testing:
outputs:
    ubuntu_on_branche:
        description: ip to connect to the VM in the branch network
        value:
            ip: { get_attribute: [branche_ub_floating_ip, floating_ip_address ] }

    wan_server:
        description: ip of the server on the wan side
        value:
            ip: { get_attribute: [north_ubuntu, networks ] }