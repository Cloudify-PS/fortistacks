tosca_definitions_version: cloudify_dsl_1_3

description: >
  Deployment of 2 networks  with a VM as a router in the middle.
  Idea is to be able to have netem and simulate a WAN.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - plugin:cloudify-openstack-plugin
  - plugin:cloudify-utilities-plugin
  - includes/wan.yaml

inputs:
  fos_image:
    default: {}
  fos_flavor:
    default: {}
  key_name:
    default: {}
  ub_image:
     default: {}  
  ub_flavor:
     default: {}
  agent_user:
      default: "ubuntu"


  mgmt_network_name:
    default: "mgmt"
  external_network_name:
    default: "ext_net"



dsl_definitions:

# The configuration of openstack access is in the file /etc/cloudify/openstack_config.json
# For simplicity of blueprint reading.

#  ##openstack_config: &openstack_config
#    username: { get_secret: keystone_username }
#    password: { get_secret: keystone_password }
#    tenant_name: { get_secret: keystone_tenant_name }
#    auth_url: { get_secret: keystone_url }
#    region: { get_secret: region }

node_templates:


# networks


  dc_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: dc_network_openstack

  dc_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      ##openstack_config: *openstack_config
      resource_id: dc_subnet
      subnet:
#        host_routes: [ {"nexthop": "10.1.2.254", "destination": "10.20.20.0/24"} ]
        allocation_pools:
          - start: 10.1.2.3
            end: 10.1.2.140
        dns_nameservers: [1.1.1.1]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.1.2.0/24
              ip_version: 4
              gateway_ip: 10.1.2.1
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.1.2.0/24
              ip_version: 4
              gateway_ip: 10.1.2.1
    relationships:
      - target: dc_network
        type: cloudify.relationships.contained_in
      - target: dc_router
        type: cloudify.openstack.subnet_connected_to_router


  dc_ubuntu:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: ub_flavor }
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # Bug in cloudify agents use internal ip and not floating
      ##openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: |
                #cloud-config
                chpasswd:
                  list: |
                    ubuntu:fortinet
                  expire: False
                write_files:
                  - content: |
                      # Enable dhcp on ens4
                      auto ens4
                      iface ens4 inet dhcp
                    path: /etc/network/interfaces.d/51-ens4.cfg
                package_upgrade: true
                packages:
                  - tcpdump
                  - zile
                power_state:
                 delay: "now"
                 mode: reboot
                 message: Rebooting to ensure network conf
                 timeout: 10
                 condition: True
    relationships:
      - target: dc_network
        type: cloudify.relationships.depends_on
      - target: dc_subnet
        type: cloudify.relationships.connected_to

# creating output for easing the testing:
outputs:

    dc_server:
        description: ip of the server on the wan side
        value:
            ip: { get_attribute: [dc_ubuntu, networks ] }