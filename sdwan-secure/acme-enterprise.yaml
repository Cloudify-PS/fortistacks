tosca_definitions_version: cloudify_dsl_1_3

description: >
  Deployment of 2 networks  with a VM as a router in the middle.
  On the router VM netem simulate a WAN. MPLS is a normal network.
  To be run before deployment:
  $ cfy secret create fgt_license -f ../fortigate/FGT.lic
imports:
  - http://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.14.7/plugin.yaml
  #- plugin:cloudify-openstack-plugin
  - plugin:cloudify-utilities-plugin
  - includes/wan.yaml


inputs:
  fos_image:
    default: {}
  fos_flavor:
    default: {}
  key_name:
    default: {}
  ub_image:
     default: {}  
  ub_flavor:
     default: {}
  agent_user:
      default: "ubuntu"

  mgmt_network_name:
    default: "mgmt"
  external_network_name:
    default: "ext_net"

  fortigate_license_filename:
    type: string
    description: Name of the Fortigate license file (It will be uploaded to Fortigate VM with this name). It should have .lic file extension.
    default: FGVM00TM19001469.lic


dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: keystone_region }

node_templates:

# networks
  dc_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      resource_id: dc_network

  dc_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      resource_id: dc_subnet
      subnet:
        host_routes: [ {"nexthop": "10.40.40.254", "destination": "10.20.20.0/24"} ]
        allocation_pools:
          - start: 172.27.40.3
            end: 172.27.40.140
        dns_nameservers: [1.1.1.1]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 172.27.40.0/24
              ip_version: 4
              gateway_ip: 172.27.40.1
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 172.27.40.0/24
              ip_version: 4
              gateway_ip: 172.27.40.1
    relationships:
      - target: dc_network
        type: cloudify.relationships.contained_in
      - target: dc_router
        type: cloudify.openstack.subnet_connected_to_router

# networks

  mpls_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      resource_id: mpls_network

  mpls_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      resource_id: mpls_subnet
      subnet:
        host_routes: [ {"nexthop": "10.30.30.1", "destination": "172.27.40.0/24"} ]
        cidr: 10.30.30.0/24
        allocation_pools:
        - start: 10.30.30.3
          end: 10.30.30.140
        ip_version: 4
        gateway_ip: 10.30.30.1
    relationships:
    - target: mpls_network
      type: cloudify.relationships.contained_in
    - target: dc_router
      type: cloudify.openstack.subnet_connected_to_router

#
  branchea_lan:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      resource_id: branchea_lan

  branchea_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      resource_id: branchea_subnet
      subnet:
        host_routes: [ {"nexthop": "192.168.12.254", "destination": "10.0.0.0/8"}, {"nexthop": "192.168.12.254", "destination": "172.27.40.0/24"} ]
        cidr: 192.168.12.0/24
        allocation_pools:
        - start: 192.168.12.3
          end: 192.168.12.140
        ip_version: 4
        gateway_ip: null
    relationships:
    - target: branchea_lan
      type: cloudify.relationships.contained_in


  brancheA_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
      resource_id: brancheA_port
      fixed_ip: "192.168.12.254"
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create:
#          inputs:
#            args:
#              port_security_enabled: False
    relationships:
      - target: branchea_lan
        type: cloudify.relationships.contained_in
      - target: branchea_subnet
        type: cloudify.relationships.connected_to
#      - target: branchea_subnet
#        type: cloudify.relationships.depends_on

  fosa_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }

  # Cloud config for fortigate, responsible for license file upload which is being applied at installation
  branchea_fortigate_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        write_files:
          - path: { get_input: fortigate_license_filename }
            owner: root:root
            permissions: '0444'
            content: { get_secret: fgt_license }

  branchea_fortigate:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      server:
        image_name: { get_input: fos_image }
        flavor_name: { get_input: fos_flavor }
        #useless key_name for fortinet but mandatory for openstack
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # do not install agent
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: { get_attribute: [ branchea_fortigate_cloud_config, cloud_config ] }
    relationships:
      - target: fosa_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: brancheA_port
        type: cloudify.relationships.depends_on
      - target: mpls_network
        type: cloudify.relationships.connected_to
      - target: mpls_subnet
        type: cloudify.relationships.depends_on
      - target: isp_network
        type: cloudify.relationships.connected_to
      - target: isp_subnet
        type: cloudify.relationships.depends_on
      - target: brancheA_port
        type: cloudify.relationships.connected_to
      - target: brancheA_port
        type: cloudify.relationships.depends_on
      - type: cloudify.relationships.depends_on
        target: branchea_fortigate_cloud_config

  branchea_fortigate_config:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth: &terminal_auth
              user: admin
              password: ''
              ip: { get_attribute: [branchea_fortigate, ip ] }
              promt_check:
                - '#'
                - '$'
              errors:
                - "Command fail."
            calls:
              - action: exit
        configure:
          inputs:
            terminal_auth: *terminal_auth
            calls:
              - template: scripts/fortigate/fortigate-config.txt
    relationships:
      - type: cloudify.relationships.depends_on
        target: branchea_fortigate



  branchea_ub_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }

  dc_ub_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }



  breanchea_ubuntu:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: ub_flavor }
        key_name: { get_input: key_name }
      agent_config:
        install_method: none # Bug in cloudify agents use internal ip and not floating
      openstack_config: *openstack_config
      management_network_name: { get_input: mgmt_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: |
                #cloud-config
                chpasswd:
                  list: |
                    ubuntu:fortinet
                  expire: False
                write_files:
                  - content: |
                      # Enable dhcp on ens4
                      auto ens4
                      iface ens4 inet dhcp
                    path: /etc/network/interfaces.d/51-ens4.cfg
                  - content: |
                      # Enable vnc access from mac native
                      gsettings set  org.gnome.Vino enabled true
                      gsettings set  org.gnome.Vino  require-encryption false
                      gsettings set  org.gnome.Vino vnc-password Zm9ydGluZXQ=
                      gsettings set org.gnome.Vino use-upnp true
                      gsettings set org.gnome.Vino notify-on-connect false
                      gsettings set org.gnome.Vino prompt-enabled false
                      gsettings set org.gnome.Vino authentication-methods  "['vnc']"
                    owner: 1000:1000
                    path: /usr/local/bin/vnconmac.sh
                package_upgrade: true
                package_reboot_if_required: true
                packages:
                  - traceroute
                  - zile
                  - ubuntu-desktop
                  - vlc
                power_state:
                  delay: now
                  mode: reboot
                  message: "Rebooting to ensure network conf"
                  timeout: 20
                  condition: true
    relationships:
      - target:  branchea_lan
        type: cloudify.relationships.connected_to
      - target:  branchea_subnet
        type: cloudify.relationships.depends_on
      - target: branchea_ub_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip

# creating output for easing the testing:
outputs:

    dc_server:
        description: ip of the server on the wan side
        value:
            ip: { get_attribute: [breanchea_ubuntu, networks, mgmt, 0 ] }

    FGT:
        description: ips of the fortigate
        value:
            ip: { get_attribute: [branchea_fortigate, ip ] }
            networks: { get_attribute: [branchea_fortigate, networks ] }
            mgmt: { get_attribute: [branchea_fortigate, networks,mgmt ] }