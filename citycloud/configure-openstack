#!/bin/bash
#
#    fortinet-configure-openstack
#    Copyright (C) 2016 Fortinet  Ltd.
#
#    Authors: Nicolas Thomss  <nthomasfortinet.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -ex

echo "This script helps configure any openstack deployed by juju "

PKGS=" python-keystone python-neutronclient python-novaclient python-glanceclient python-openstackclient python-heatclient"
dpkg -l $PKGS > /dev/null || sudo apt install -y $PKGS


NEUTRON_EXT_NET_GW="10.10.10.1"
NEUTRON_EXT_NET_CIDR="10.10.10.0/23"

NEUTRON_EXT_NET_NAME="ext_net" # Unused
NEUTRON_DNS=$NEUTRON_EXT_NET_GW
NEUTRON_FLOAT_RANGE_START="10.10.11.12"
NEUTRON_FLOAT_RANGE_END="10.10.11.253"

NEUTRON_FIXED_NET_CIDR="192.168.16.0/22"


# Determine the tenant id for the configured tenant name.
export TENANT_ID="$(openstack project list | grep $OS_TENANT_NAME | awk '{ print $2 }')"

if [ "$TENANT_ID" = "" ]; then
	echo "Unable to find tenant ID, keystone auth problem"
	exit 2
fi

echo "Configuring Openstack Neutron Networking"

#create ext network with neutron for floating IPs
neutron net-show ext_net > /dev/null 2>&1 || neutron net-create ext_net --tenant-id $TENANT_ID -- --router:external=True
EXTERNAL_NETWORK_ID=$(neutron net-show ext_net | grep " id" | awk '{print $4}')
neutron subnet-show ext_net_subnet > /dev/null 2>&1 || neutron subnet-create ext_net $NEUTRON_EXT_NET_CIDR --name ext_net_subnet --tenant-id $TENANT_ID \
--allocation-pool start=$NEUTRON_FLOAT_RANGE_START,end=$NEUTRON_FLOAT_RANGE_END \
--gateway $NEUTRON_EXT_NET_GW --disable-dhcp --dns_nameservers $NEUTRON_DNS list=true

#Create mgmt network for neutron for tenant VMs
neutron net-show mgmt > /dev/null 2>&1 || neutron net-create mgmt
neutron subnet-show mgmt_subnet > /dev/null 2>&1 || neutron subnet-create mgmt $NEUTRON_FIXED_NET_CIDR -- --name mgmt_subnet --dns_nameservers list=true $NEUTRON_DNS
SUBNET_ID=$(neutron subnet-show mgmt_subnet | grep " id" | awk '{print $4}')

#Create router for external network and mgmt network
neutron router-show provider-router > /dev/null 2>&1 || neutron router-create --tenant-id $TENANT_ID provider-router
ROUTER_ID=$(neutron router-show provider-router | grep " id" | awk '{print $4}')

neutron router-gateway-clear provider-router || true
neutron router-gateway-set $ROUTER_ID $EXTERNAL_NETWORK_ID
## make it always ok to have it indempodent.
neutron router-interface-add $ROUTER_ID $SUBNET_ID || true



#Configure the default security group to allow ICMP and SSH
openstack security group rule create --proto icmp default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 22 default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 80 default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 443 default || echo "should have been created already"
#port for RDP
openstack security group rule create --proto tcp --dst-port 3389 default || echo "should have been created already"


##make wide open
openstack security group rule create --proto tcp --dst-port 1:65535  default || echo "should have been created already"
openstack security group rule create --proto udp --dst-port 1:65535  default || echo "should have been created already"


#Upload a default SSH key
openstack keypair create  --public-key ~/.ssh/id_rsa.pub default  || echo "asssuming key is already uploaded"

#Can't change flavors on citycloud.
# images and quota are also not part of this



